{"version":3,"sources":["components/timer.tsx","components/counter.tsx","components/box.tsx","components/fileWrapper.tsx","components/traffic_light.tsx","serviceWorker.ts","index.tsx"],"names":["Timer","props","state","intervalId","time","Date","this","setInterval","setState","clearInterval","toLocaleTimeString","React","Component","Counter","handlePlusCount","count","handleMinusCount","className","onClick","Box","addSquareBlock","blocks","renderSquareBlock","i","step","SquareBlock","FileWrapper","handleFileInput","e","file","target","files","console","log","result","FileReader","readAsDataURL","img_src","type","accept","onChange","renderThumbnail","TrafficLight","light","changeColor","lightStyle","backgroundColor","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81eda324.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default class Timer extends React.Component<{}, {}> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { time: new Date() }\n  }\n  state: { time: any }\n  intervalId: any\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      this.setState({\n        time: new Date(),\n      })\n    }, 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.time.toLocaleTimeString()}</p>\n      </div >\n    )\n  }\n}\n","import React from \"react\"\nimport \"./counter.css\"\n\ntype CounterState = {\n  count: number\n}\n\n\nexport default class Counter extends React.Component<{}, CounterState> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { count: 0 }\n  }\n\n  handlePlusCount = (): void => {\n    this.setState({ count: this.state.count + 1 })\n  }\n\n  handleMinusCount = (): void => {\n    this.setState({ count: this.state.count - 1 })\n  }\n\n  render() {\n    return (\n      <div className=\"couner_wrap\">\n        <p>カウントアップ</p>\n        <div className=\"flex\">\n          <div>{this.state.count}</div>\n          <button onClick={this.handlePlusCount}>+</button>\n          <button onClick={this.handleMinusCount}>-</button>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport \"./box.css\"\n\ntype BoxState = {\n  blocks: number\n}\n\nexport default class Box extends React.Component<{}, BoxState>{\n  constructor(props: {}) {\n    super(props)\n    this.state = { blocks: 0 }\n  }\n\n  addSquareBlock = () => {\n    this.setState({ blocks: this.state.blocks + 1 })\n  }\n  renderSquareBlock = (i: number): any => {\n    for (let step: number = 0; step < i; step++) {\n      return (\n        <SquareBlock />\n      )\n    }\n  }\n\n  render() {\n    const blocks = this.state.blocks\n    return (\n      <div>\n        <button onClick={this.addSquareBlock}>ボタン押してね！</button>\n        <div>{this.renderSquareBlock(blocks)}</div>\n      </div>\n    )\n  }\n}\n\nclass SquareBlock extends React.Component<{}, {}>{\n  render() {\n    return (\n      <div className=\"square\">\n        <p>押したよ！</p>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\n\n\ntype FileWrapperState = {\n  img_src: any\n}\n\nexport default class FileWrapper extends React.Component<{}, FileWrapperState>{\n  constructor(props: {}) {\n    super(props)\n    this.state = { img_src: null }\n  }\n\n  handleFileInput = (e: any): void => {\n    var file = e.target.files[0]\n    console.log(e.target.result)\n    const reader = new FileReader();\n\n    // reader.onload = (e) => {\n    //   this.setState({ img_src: e.target.result })\n    // }\n    reader.readAsDataURL(file)\n\n  }\n\n  renderThumbnail(e: any) {\n    return (\n      <div>{this.state.img_src}</div>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"file\" accept=\"image/*\" onChange={(e) => { this.handleFileInput(e) }} />\n        <div>{this.renderThumbnail}</div>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport \"./traffic_light.css\"\n\ntype TrafficLightState = {\n  light: \"green\" | \"yellow\" | \"red\" | undefined\n}\nexport default class TrafficLight extends React.Component<{}, TrafficLightState> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { light: \"green\" }\n  }\n\n  componentDidMount() {\n    const changeColor = (): \"green\" | \"yellow\" | \"red\" | undefined => {\n      switch (this.state.light) {\n        case \"green\":\n          return \"yellow\"\n        case \"yellow\":\n          return \"red\"\n        case \"red\":\n          return \"green\"\n      }\n    }\n    setInterval(() => {\n      this.setState({\n        light: changeColor()\n      })\n\n      this.setState({\n      })\n    }, 1000)\n  }\n\n  render() {\n    const lightStyle = {\n      backgroundColor: this.state.light\n    }\n    return (\n      <div className=\"flex\" >\n        <div className=\"lightbox\" style={lightStyle}></div>\n        <div className=\"lightbox\" style={lightStyle}></div>\n        <div className=\"lightbox\" style={lightStyle}></div>\n      </div >\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from \"./components/timer\";\nimport Counter from \"./components/counter\";\nimport Box from \"./components/box\"\nimport FileWrapper from \"./components/fileWrapper\"\nimport TrafficLight from \"./components/traffic_light\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n    <Counter />\n    <TrafficLight />\n    <Box />\n    <FileWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}